
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/RNIContextMenuViewSpec/EventEmitters.h>


namespace facebook::react {

void RNIContextMenuButtonEventEmitter::onDidSetViewID(OnDidSetViewID $event) const {
  dispatchEvent("didSetViewID", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onMenuWillShow(OnMenuWillShow $event) const {
  dispatchEvent("menuWillShow", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onMenuDidShow(OnMenuDidShow $event) const {
  dispatchEvent("menuDidShow", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onMenuWillHide(OnMenuWillHide $event) const {
  dispatchEvent("menuWillHide", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onMenuDidHide(OnMenuDidHide $event) const {
  dispatchEvent("menuDidHide", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onMenuWillCancel(OnMenuWillCancel $event) const {
  dispatchEvent("menuWillCancel", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onMenuDidCancel(OnMenuDidCancel $event) const {
  dispatchEvent("menuDidCancel", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onRequestDeferredElement(OnRequestDeferredElement $event) const {
  dispatchEvent("requestDeferredElement", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuButtonEventEmitter::onPressMenuItem(OnPressMenuItem $event) const {
  dispatchEvent("pressMenuItem", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onDidSetViewID(OnDidSetViewID $event) const {
  dispatchEvent("didSetViewID", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuWillShow(OnMenuWillShow $event) const {
  dispatchEvent("menuWillShow", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuDidShow(OnMenuDidShow $event) const {
  dispatchEvent("menuDidShow", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuWillHide(OnMenuWillHide $event) const {
  dispatchEvent("menuWillHide", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuDidHide(OnMenuDidHide $event) const {
  dispatchEvent("menuDidHide", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuWillCancel(OnMenuWillCancel $event) const {
  dispatchEvent("menuWillCancel", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuDidCancel(OnMenuDidCancel $event) const {
  dispatchEvent("menuDidCancel", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuWillCreate(OnMenuWillCreate $event) const {
  dispatchEvent("menuWillCreate", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onRequestDeferredElement(OnRequestDeferredElement $event) const {
  dispatchEvent("requestDeferredElement", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onPressMenuItem(OnPressMenuItem $event) const {
  dispatchEvent("pressMenuItem", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onPressMenuPreview(OnPressMenuPreview $event) const {
  dispatchEvent("pressMenuPreview", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuAuxiliaryPreviewWillShow(OnMenuAuxiliaryPreviewWillShow $event) const {
  dispatchEvent("menuAuxiliaryPreviewWillShow", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIContextMenuViewEventEmitter::onMenuAuxiliaryPreviewDidShow(OnMenuAuxiliaryPreviewDidShow $event) const {
  dispatchEvent("menuAuxiliaryPreviewDidShow", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}

} // namespace facebook::react
