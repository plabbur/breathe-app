
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/RNIUtilitiesSpec/EventEmitters.h>


namespace facebook::react {

void RNIDetachedViewEventEmitter::onDidSetViewID(OnDidSetViewID $event) const {
  dispatchEvent("didSetViewID", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDetachedViewEventEmitter::onViewWillRecycle(OnViewWillRecycle $event) const {
  dispatchEvent("viewWillRecycle", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDetachedViewEventEmitter::onRawNativeEvent(OnRawNativeEvent $event) const {
  dispatchEvent("rawNativeEvent", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDetachedViewEventEmitter::onContentViewDidDetach(OnContentViewDidDetach $event) const {
  dispatchEvent("contentViewDidDetach", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDetachedViewEventEmitter::onViewDidDetachFromParent(OnViewDidDetachFromParent $event) const {
  dispatchEvent("viewDidDetachFromParent", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDummyTestViewEventEmitter::onSomeDirectEventWithEmptyPayload(OnSomeDirectEventWithEmptyPayload $event) const {
  dispatchEvent("someDirectEventWithEmptyPayload", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDummyTestViewEventEmitter::onSomeDirectEventWithObjectPayload(OnSomeDirectEventWithObjectPayload $event) const {
  dispatchEvent("someDirectEventWithObjectPayload", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDummyTestViewEventEmitter::onSomeBubblingEventWithEmptyPayload(OnSomeBubblingEventWithEmptyPayload $event) const {
  dispatchEvent("someBubblingEventWithEmptyPayload", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDummyTestViewEventEmitter::onSomeBubblingEventWithObjectPayload(OnSomeBubblingEventWithObjectPayload $event) const {
  dispatchEvent("someBubblingEventWithObjectPayload", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIDummyTestViewEventEmitter::onDidSetViewID(OnDidSetViewID $event) const {
  dispatchEvent("didSetViewID", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIWrapperViewEventEmitter::onDidSetViewID(OnDidSetViewID $event) const {
  dispatchEvent("didSetViewID", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIWrapperViewEventEmitter::onViewWillRecycle(OnViewWillRecycle $event) const {
  dispatchEvent("viewWillRecycle", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNIWrapperViewEventEmitter::onRawNativeEvent(OnRawNativeEvent $event) const {
  dispatchEvent("rawNativeEvent", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}

} // namespace facebook::react
